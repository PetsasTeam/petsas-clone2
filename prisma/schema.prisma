generator client {
  provider      = "prisma-client-js"
  output        = "../app/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VehicleCategory {
  id               String            @id @default(cuid())
  name             String            @unique
  displayOrder     Int               @default(0)
  visible          Boolean           @default(true)
  seasonalPricings SeasonalPricing[]
  vehicles         Vehicle[]
}

model Vehicle {
  id            String          @id @default(cuid())
  group         String
  code          String          @unique
  name          String
  image         String
  engineSize    String
  doors         Int
  seats         Int
  transmission  String
  bigLuggages   Int
  smallLuggages Int
  hasAC         Boolean
  categoryId    String
  visible       Boolean         @default(true)
  adults        Int?
  children      Int?
  bookings      Booking[]
  category      VehicleCategory @relation(fields: [categoryId], references: [id])
}

model Season {
  id               String            @id @default(cuid())
  name             String            @unique
  startDate        DateTime
  endDate          DateTime
  type             String?
  seasonalPricings SeasonalPricing[]
}

model SeasonalPricing {
  id              String          @id @default(cuid())
  categoryId      String
  seasonId        String
  group           String
  price3to6Days   Float
  price7to14Days  Float
  price15PlusDays Float
  basePrice3to6Days   Float?
  basePrice7to14Days  Float?
  basePrice15PlusDays Float?
  category        VehicleCategory @relation(fields: [categoryId], references: [id])
  season          Season          @relation(fields: [seasonId], references: [id])

  @@unique([categoryId, seasonId, group])
}

model RentalOption {
  id           String                @id @default(cuid())
  code         String                @unique
  name         String
  displayOrder Int                   @default(0)
  visible      Boolean               @default(true)
  maxQty       Int                   @default(1)
  priceType    String                @default("per Day")
  maxCost      Float?
  freeOverDays Int?
  photo        String?
  description  String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  pricingTiers RentalOptionPricing[]
}

model RentalOptionPricing {
  id             String       @id @default(cuid())
  rentalOptionId String
  vehicleGroups  String
  price          Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  rentalOption   RentalOption @relation(fields: [rentalOptionId], references: [id], onDelete: Cascade)

  @@unique([rentalOptionId, vehicleGroups])
}

model Location {
  id             String   @id @default(cuid())
  name           String   @unique
  type           String
  displayOrder   Int      @default(0)
  visible        Boolean  @default(true)
  address        String?
  city           String?
  postcode       String?
  country        String?
  phone          String?
  email          String?
  openingHours   String?
  latitude       Float?
  longitude      Float?
  instructions   String?
  facilities     String?
  isPickupPoint  Boolean  @default(true)
  isDropoffPoint Boolean  @default(true)
  hasDelivery    Boolean  @default(false)
  deliveryRadius Int?
  deliveryFee    Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Customer {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firstName   String
  lastName    String
  email       String    @unique
  phone       String
  address     String?
  dateOfBirth DateTime?
  password    String?
  verified    Boolean   @default(false)
  bookings    Booking[]
}

model Promotion {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  discount  Float
  startDate DateTime
  endDate   DateTime
  visible   Boolean  @default(true)
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  startDate     DateTime
  endDate       DateTime
  totalPrice    Float
  status        String
  customerId    String
  vehicleId     String
  invoiceNo     String?
  orderNumber   String?      // Order number for JCC payment (e.g., "cmd5ko5f75209123")
  paymentStatus String       @default("Pending")
  paymentType   String       @default("On Arrival")
  transactionId String?      // JCC Order ID (e.g., "574d18c8-f83a-7fac-94cf-db332ec596c8")
  customer      Customer     @relation(fields: [customerId], references: [id])
  vehicle       Vehicle      @relation(fields: [vehicleId], references: [id])
  paymentLogs   PaymentLog[]
}

model GeneralSetting {
  id                   String   @id @default(cuid())
  maxRowsPerPage       Int      @default(500)
  vatPercentage        Float    @default(19.0)
  payOnArrivalDiscount Float    @default(10.0)
  payOnlineDiscount    Float    @default(15.0)
  nextInvoiceNumber    String   @default("1")
  nextOrderNumber      String   @default("1")      // Sequential order number counter (K000001, K000002, etc.)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  contactEmail         String?
  contactPhone         String?
  glassmorphismEnabled Boolean  @default(true)
  socialFacebook       String?
  socialInstagram      String?
  socialLinkedin       String?
  socialTwitter        String?
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  imageUrl    String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contentRu   String?
  publishedRu Boolean  @default(false)
  slugRu      String?  @unique
  summary     String?
  summaryRu   String?
  titleRu     String?
  featured    Boolean  @default(false)
  readTime    Int?
  views       Int      @default(0)
  category    String?
  tags        String[]
}

model SiteContent {
  id        String   @id @default(cuid())
  key       String   @unique
  type      String
  value     String
  altText   String?
  linkUrl   String?
  group     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentLog {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Basic payment info
  bookingId         String?
  orderId           String?  // JCC order ID
  orderNumber       String?  // Our internal order number
  amount            Float
  currency          String   @default("EUR")
  
  // Customer info (for failed payments where booking might not exist)
  customerEmail     String?
  customerFirstName String?
  customerLastName  String?
  customerPhone     String?
  
  // Payment attempt details
  paymentType       String   // "create_order" or "verify_payment"
  status            String   // "success", "failed", "pending"
  
  // JCC response data
  jccOrderId        String?  // JCC's order ID
  jccStatus         String?  // JCC payment status (0, 1, 2)
  jccErrorCode      String?  // JCC error code if failed
  jccErrorMessage   String?  // JCC error message if failed
  jccFormUrl        String?  // JCC payment form URL
  
  // Our processing details
  attemptNumber     Int      @default(1)
  processingTime    Int?     // Time taken in milliseconds
  userAgent         String?
  ipAddress         String?
  
  // Full response data for debugging
  rawJccResponse    String?  // Full JCC API response
  errorDetails      String?  // Our internal error details
  
  // Relations
  booking           Booking? @relation(fields: [bookingId], references: [id])
  
  @@index([bookingId])
  @@index([orderId])
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
}
